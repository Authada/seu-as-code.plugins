buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.1'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.11.0'
    id 'com.jfrog.bintray' version '1.2'
    id 'com.github.kt3k.coveralls' version '2.4.0'
}

allprojects {
    apply plugin: 'jacoco'

    group = 'de.qaware.seu.as.code'

    repositories {
        jcenter()
        mavenCentral()
    }

    jacoco {
        toolVersion = '0.7.2.201409121644'
    }
}

subprojects {
    apply plugin: 'base'
    apply plugin: 'groovy'
    apply plugin: 'java'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.gradle.plugin-publish'

    license {
        includes(["**/*.java", "**/*.groovy"])
        mapping {
            java = 'SLASHSTAR_STYLE'
            groovy = 'SLASHSTAR_STYLE'
        }
    }

    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    dependencies {
        compile gradleApi()
		compile 'org.codehaus.groovy:groovy-all:2.3.10'
        
        testCompile 'org.spockframework:spock-core:1.0-groovy-2.3'
		testCompile 'org.hamcrest:hamcrest-library:1.3'
		testRuntime 'cglib:cglib-nodep:3.1'    
		testRuntime 'org.objenesis:objenesis:2.1'	
		testCompile 'com.athaydes:spock-reports:1.2.5'		
    }
	
	test {
		reports {
			junitXml.enabled = false
			html.enabled = true
		}
	}

    // This disables the pedantic doclint feature of JDK8
    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    jacocoTestReport {
        group = 'Coverage'
        description = 'Generate Jacoco coverage report for subproject'

        additionalSourceDirs = project.files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = project.files(sourceSets.main.allSource.srcDirs)
        classDirectories =  project.files(sourceSets.main.output)

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage') {
    description = 'Generates aggregate Jacoco coverage report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage'
    description = 'Upload aggregate Jacoco coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI_NAME' }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}
